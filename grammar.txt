expr              : KEYWORD:SAVE IDENTIFiER expr
                  : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr         : NOT comp-expr
                  : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr        : term ((PLUS|MINUS) term)*

term              : factor ((MUL|DIV) factor)*

factor            : (PLUS|MINUS) factor
                  : power

power             : atom (POW factor)*

atom              : INT|FLOAT|IDENTIFIER
                  : LPAREN expr RPAREN

if-expr           : KEYWORD:IF expr KEYWORD:THEN expr
                  : (KEYWORD:ELIF expr KEYWORD:THEN expr)*
                  : (KEYWORD:ELSE expr)?

variable: SAVE (keyword) variable_letter (IDENTIFIER) atom
SHOW variable_letter (IDENTIFIER)

# The above Grammar Ordered based on priority


Expressions must take priority for logical operations
5 + 5 == 2 + 8
(5 + 5) == (2 + 8)
SAVE variable 5==5
SAVE variable (5==5)

5 == 5 AND 6 == 6
(5 == 5) AND (6 == 6)

Conditions
if 5 == 5 then "yes" else "something is wrong"


Key
(?) - optional
(*) - one or many